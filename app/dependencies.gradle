def versions = [:]
versions.support = '26.1.0'
versions.constraintLayout = '1.0.2'
versions.retrofit = '2.3.0'
versions.okHttp = '3.9.0'
versions.rxAndroid = '2.0.1'
versions.rxJava = '2.1.5'
versions.glide = '3.6.1'
versions.dagger = '2.13'
versions.arch = '1.0.0'
versions.junit = '4.12'
versions.mockito = '2.8.47'
versions.cicerone = '2.1.0'

ext {

    //Packages
    supportPackage = 'com.android.support'
    retrofitPackage = 'com.squareup.retrofit2'
    okhttpPackage = 'com.squareup.okhttp3'
    reactivePackage = 'io.reactivex.rxjava2'
    glidePackage = 'com.github.bumptech.glide'
    daggerPackage = 'com.google.dagger'
    archPackage = 'android.arch'
    ciceronePackage = 'ru.terrakok.cicerone'

    junitPackage = 'junit'
    mockitoPackage = 'org.mockito'

    supportDependencies = [

            design          : buildDependency(supportPackage, 'design', versions.support),
            recyclerView    : buildDependency(supportPackage, 'recyclerview-v7', versions.support),
            cardView        : buildDependency(supportPackage, 'cardview-v7', versions.support),
            appCompat       : buildDependency(supportPackage, 'appcompat-v7', versions.support),
            constraintLayout: buildDependency(supportPackage + ".constraint", 'constraint-layout', versions.constraintLayout)
    ]

    archComponents = [

            lifecycle_runtime        : buildDependency(archPackage + ".lifecycle", 'runtime', versions.arch),
            lifecycle_compiler       : buildDependency(archPackage + ".lifecycle", 'compiler', versions.arch),
            lifecycle_extensions     : buildDependency(archPackage + ".lifecycle", 'extensions', versions.arch),
            lifecycle_reactivestreams: buildDependency(archPackage + ".lifecycle", 'reactivestreams', versions.arch),
            lifecycle_java8          : buildDependency(archPackage + ".lifecycle", 'common-java8', versions.arch),
            arch_core                : buildDependency(archPackage + ".core", 'core-testing', versions.arch),

            room_runtime             : buildDependency(archPackage + ".persistence.room", 'runtime', versions.arch),
            room_compiler            : buildDependency(archPackage + ".persistence.room", 'compiler', versions.arch),
            room_rxjava2             : buildDependency(archPackage + ".persistence.room", 'rxjava2', versions.arch)
    ]

    retrofitDependencies = [

            retrofit                  : buildDependency(retrofitPackage, 'retrofit', versions.retrofit),
            gson                      : buildDependency(retrofitPackage, 'converter-gson', versions.retrofit),
            rxAdapterJava             : buildDependency(retrofitPackage, 'adapter-rxjava2', versions.retrofit),
            okhttp                    : buildDependency(okhttpPackage, 'okhttp', versions.okHttp),
            okhttp_logging_interceptor: buildDependency(okhttpPackage, 'logging-interceptor', versions.okHttp)
    ]

    rxDependencies = [

            rxAndroid: buildDependency(reactivePackage, 'rxandroid', versions.rxAndroid),
            rxJava   : buildDependency(reactivePackage, 'rxjava', versions.rxJava)
    ]

    daggerDependencies = [

            dagger                  : buildDependency(daggerPackage, 'dagger', versions.dagger),
            annotationProcessor     : buildDependency(daggerPackage, 'dagger-compiler', versions.dagger),
            daggerAndroid           : buildDependency(daggerPackage, 'dagger-android', versions.dagger),
            dagger_android_processor: buildDependency(daggerPackage, 'dagger-android-processor', versions.dagger),
            daggerAndroidSupport    : buildDependency(daggerPackage, 'dagger-android-support', versions.dagger),

    ]

    glide = buildDependency(glidePackage, 'glide', versions.glide)
    cicerone = buildDependency(ciceronePackage, 'cicerone', versions.cicerone)

    testingDependencies = [

            junit  : buildDependency(junitPackage, 'junit', versions.junit),
            mockito: buildDependency(mockitoPackage, 'mockito-core', versions.mockito)

    ]
}

static String buildDependency(String pack, String dependency, String version) {
    return "${pack}:${dependency}:${version}"
}